<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    version="1.0">

<!--

Example style sheet to generate an AppSync Apache Velocity Response template.

-->

<xsl:output
  method="text"
  version="1.0"
  encoding="UTF-8"/>


<xsl:param name="procedure-identifier"/>


<xsl:template match="/sql">
  <xsl:if test="$procedure-identifier = ''">
    <xsl:message terminate="yes">Parameter procedure-identifier is required.</xsl:message>
  </xsl:if>
  <xsl:if test="not(storedProcedure[@identifier = $procedure-identifier])">
    <xsl:message terminate="yes">No procedure with identifier <xsl:value-of select="@procedure-identifier"/> found.</xsl:message>
  </xsl:if>
  <xsl:apply-templates select="storedProcedure[@identifier = $procedure-identifier]"/>
</xsl:template>


<!-- NOTE: a $context.result is an array with the result for each
     statement.  The result for a statement is an array itself.

     So we just pick the first response as we assume we have only 1
     SQL statement which we execute.
-->

<xsl:template match="storedProcedure">
  <xsl:variable name="max-one-row" select="select/@instance = true() or select/@value = true()"/>
<xsl:text/>## Generated by xplain2sql and appsync-response-vtl.xsl
#if($context.error)
  $utils.error($context.error.message, $context.error.type)
#end
<xsl:choose>
  <xsl:when test="@returns">
    <xsl:text/>$utils.toJson($utils.rds.toJsonObject($context.result)[0][0]["<xsl:value-of select="select/column/@identifier"/>"])<xsl:text/>
  </xsl:when>
  <xsl:when test="$max-one-row">
    <xsl:text/>#set( $result = $utils.rds.toJsonObject($context.result) )
#if (!$result[0].isEmpty())
$utils.toJson($result[0][0])
#else
null
#end<xsl:text/>
  </xsl:when>
  <xsl:otherwise>
    <xsl:text/>$utils.toJson($utils.rds.toJsonObject($context.result)[0])<xsl:text/>
  </xsl:otherwise>
</xsl:choose>
<xsl:text>
</xsl:text>
</xsl:template>


<xsl:template match="storedProcedure[not(select/column)]">
<xsl:text/>## Generated by xplain2sql and appsync-response-vtl.xsl
#if($context.error)
  $utils.error($context.error.message, $context.error.type)
#end
[]
</xsl:template>


</xsl:stylesheet>
